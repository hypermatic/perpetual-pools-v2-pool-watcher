/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPoolKeeperInterface extends ethers.utils.Interface {
  functions: {
    "checkUpkeepMultiplePools(address[])": FunctionFragment;
    "checkUpkeepSinglePool(address)": FunctionFragment;
    "newPool(address)": FunctionFragment;
    "performUpkeepMultiplePools(address[])": FunctionFragment;
    "performUpkeepSinglePool(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkUpkeepMultiplePools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeepSinglePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "performUpkeepMultiplePools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeepSinglePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeepMultiplePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeepSinglePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepMultiplePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeepSinglePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;

  events: {
    "KeeperPaid(address,address,uint256)": EventFragment;
    "KeeperPaymentError(address,address,uint256)": EventFragment;
    "PoolAdded(address,int256)": EventFragment;
    "PoolUpkeepError(address,string)": EventFragment;
    "UpkeepSuccessful(address,bytes,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeeperPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperPaymentError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpkeepError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepSuccessful"): EventFragment;
}

export class IPoolKeeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolKeeperInterface;

  functions: {
    checkUpkeepMultiplePools(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkUpkeepSinglePool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepMultiplePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performUpkeepSinglePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkUpkeepMultiplePools(
    pools: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkUpkeepSinglePool(
    pool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newPool(
    _poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepMultiplePools(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performUpkeepSinglePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkUpkeepMultiplePools(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkUpkeepSinglePool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newPool(_poolAddress: string, overrides?: CallOverrides): Promise<void>;

    performUpkeepMultiplePools(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    performUpkeepSinglePool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(_factory: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    KeeperPaid(
      _pool?: string | null,
      keeper?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _pool: string; keeper: string; reward: BigNumber }
    >;

    KeeperPaymentError(
      _pool?: string | null,
      keeper?: string | null,
      expectedReward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _pool: string; keeper: string; expectedReward: BigNumber }
    >;

    PoolAdded(
      poolAddress?: string | null,
      firstPrice?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { poolAddress: string; firstPrice: BigNumber }
    >;

    PoolUpkeepError(
      pool?: string | null,
      reason?: null
    ): TypedEventFilter<[string, string], { pool: string; reason: string }>;

    UpkeepSuccessful(
      pool?: string | null,
      data?: null,
      startPrice?: BigNumberish | null,
      endPrice?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { pool: string; data: string; startPrice: BigNumber; endPrice: BigNumber }
    >;
  };

  estimateGas: {
    checkUpkeepMultiplePools(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeepSinglePool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepMultiplePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performUpkeepSinglePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkUpkeepMultiplePools(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeepSinglePool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newPool(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepMultiplePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeepSinglePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
