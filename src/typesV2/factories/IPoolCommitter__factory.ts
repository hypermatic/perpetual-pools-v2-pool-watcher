/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPoolCommitter,
  IPoolCommitterInterface,
} from "../IPoolCommitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AggregateBalanceUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "enum IPoolCommitter.CommitType",
        name: "commitType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "appropriateUpdateIntervalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes16",
        name: "mintingFee",
        type: "bytes16",
      },
    ],
    name: "CreateCommit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "updateIntervalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes16",
        name: "burningFee",
        type: "bytes16",
      },
    ],
    name: "ExecutedCommitsForInterval",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPoolCommitter.CommitType",
        name: "commitType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "fromAggregateBalance",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "payForClaim",
        type: "bool",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "executeCommitments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAggregateBalance",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "longTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementTokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolCommitter.Balance",
        name: "_balance",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAppropriateUpdateIntervalId",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingCommits",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "longMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnLongMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnShortMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updateIntervalId",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolCommitter.TotalCommitment",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "longMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBurnLongMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longBurnShortMintAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updateIntervalId",
            type: "uint256",
          },
        ],
        internalType: "struct IPoolCommitter.TotalCommitment",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_invariantCheckContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_autoClaim",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mintingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "burningFee",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoteToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_leveragedPool",
        type: "address",
      },
    ],
    name: "setQuoteAndPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateAggregateBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateIntervalId",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IPoolCommitter__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolCommitterInterface {
    return new utils.Interface(_abi) as IPoolCommitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPoolCommitter {
    return new Contract(address, _abi, signerOrProvider) as IPoolCommitter;
  }
}
