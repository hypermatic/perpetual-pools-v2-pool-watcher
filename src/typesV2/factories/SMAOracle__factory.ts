/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SMAOracle, SMAOracleInterface } from "../SMAOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_spotOracle",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_spotDecimals",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_observer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_periods",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updateInterval",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_deployer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "MAX_DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256[24]",
        name: "xs",
        type: "int256[24]",
      },
      {
        internalType: "uint256",
        name: "k",
        type: "uint256",
      },
    ],
    name: "SMA",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "wad",
        type: "int256",
      },
    ],
    name: "fromWad",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceAndMetadata",
    outputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "observer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periods",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poll",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "scaler",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052600060045560006005553480156200001b57600080fd5b5060405162000c7a38038062000c7a8339810160408190526200003e916200025c565b6001600160a01b038616158015906200005f57506001600160a01b03841615155b620000b15760405162461bcd60e51b815260206004820152601b60248201527f534d413a204e756c6c206164647265737320666f7262696464656e000000000060448201526064015b60405180910390fd5b600083118015620001365750836001600160a01b0316635cfc1a516040518163ffffffff1660e01b815260040160206040518083038186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001329190620002c2565b8311155b620001795760405162461bcd60e51b8152602060048201526012602482015271534d413a204f7574206f6620626f756e647360701b6044820152606401620000a8565b6012851115620001cc5760405162461bcd60e51b815260206004820152601f60248201527f534d413a20446563696d616c20707265636973696f6e20746f6f2068696768006044820152606401620000a8565b6003839055600080546001600160a01b038089166001600160a01b03199283161790925560018054928716929091169190911790556001600160601b0319606082901b1660805262000220856012620003f0565b6200022d90600a62000325565b60065550600555506200042092505050565b80516001600160a01b03811681146200025757600080fd5b919050565b60008060008060008060c087890312156200027657600080fd5b62000281876200023f565b95506020870151945062000298604088016200023f565b93506060870151925060808701519150620002b660a088016200023f565b90509295509295509295565b600060208284031215620002d557600080fd5b5051919050565b600181815b808511156200031d5781600019048211156200030157620003016200040a565b808516156200030f57918102915b93841c9390800290620002e1565b509250929050565b60006200033383836200033a565b9392505050565b6000826200034b57506001620003ea565b816200035a57506000620003ea565b81600181146200037357600281146200037e576200039e565b6001915050620003ea565b60ff8411156200039257620003926200040a565b50506001821b620003ea565b5060208310610133831016604e8410600b8410161715620003c3575081810a620003ea565b620003cf8383620002dc565b8060001904821115620003e657620003e66200040a565b0290505b92915050565b6000828210156200040557620004056200040a565b500390565b634e487b7160e01b600052601160045260246000fd5b60805160601c61083b6200043f6000396000610155015261083b6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a035b1fe11610071578063a035b1fe14610136578063a11752791461013f578063a4caeb4214610147578063d5f3948814610150578063db6d8fcf14610177578063eb70e4981461018d57600080fd5b80630417cf8e146100b95780633c1e6ff5146100d4578063412ad1cc146100dd57806341506e44146100f05780637dc0d1d01461010357806398d5fdca1461012e575b600080fd5b6100c1601281565b6040519081526020015b60405180910390f35b6100c160065481565b6100c16100eb36600461064b565b6101a0565b6100c16100fe3660046105b1565b6101b6565b600054610116906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c1610283565b6100c160025481565b6100c161031c565b6100c160035481565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61017f610385565b6040516100cb92919061067d565b600154610116906001600160a01b031681565b6000600654826101b0919061076b565b92915050565b6000601882158015906101c95750808311155b80156101dc57506001600160ff1b038311155b6102225760405162461bcd60e51b8152602060048201526012602482015271534d413a204f7574206f6620626f756e647360701b60448201526064015b60405180910390fd5b60008061022f85846107a7565b90505b8281101561026f5785816018811061024c5761024c6107ef565b602002015161025b9083610712565b915080610267816107be565b915050610232565b5061027a848261076b565b95945050505050565b6000610317600160009054906101000a90046001600160a01b03166001600160a01b03166353ed51436040518163ffffffff1660e01b81526004016103006040518083038186803b1580156102d757600080fd5b505afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610546565b6003546101b6565b905090565b600060055460045461032e9190610753565b42101561037d5760405162461bcd60e51b815260206004820152601860248201527f534d413a20546f6f206561726c7920746f2075706461746500000000000000006044820152606401610219565b6103176103f3565b600060606103db600160009054906101000a90046001600160a01b03166001600160a01b03166353ed51436040518163ffffffff1660e01b81526004016103006040518083038186803b1580156102d757600080fd5b91506040518060200160405280600081525090509091565b60008060008054906101000a90046001600160a01b031690506000816001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190610664565b6001546040516387db03b760e01b8152600481018390529192506001600160a01b03169081906387db03b790602401602060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610622565b5061053e816001600160a01b03166353ed51436040518163ffffffff1660e01b81526004016103006040518083038186803b1580156102d757600080fd5b935050505090565b600061030080838503121561055a57600080fd5b83601f84011261056957600080fd5b6105716106da565b808486848701111561058257600080fd5b600093505b60188410156105a757805183526001939093019260209283019201610587565b5095945050505050565b60008061032083850312156105c557600080fd5b83601f8401126105d457600080fd5b6105dc6106da565b80846103008601878111156105f057600080fd5b60005b60188110156106125782358552602094850194909201916001016105f3565b5091979135965090945050505050565b60006020828403121561063457600080fd5b8151801515811461064457600080fd5b9392505050565b60006020828403121561065d57600080fd5b5035919050565b60006020828403121561067657600080fd5b5051919050565b82815260006020604081840152835180604085015260005b818110156106b157858101830151858201606001528201610695565b818111156106c3576000606083870101525b50601f01601f191692909201606001949350505050565b604051610300810167ffffffffffffffff8111828210171561070c57634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b0384900385131615610734576107346107d9565b600160ff1b839003841281161561074d5761074d6107d9565b50500190565b60008219821115610766576107666107d9565b500190565b60008261078857634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156107a2576107a26107d9565b500590565b6000828210156107b9576107b96107d9565b500390565b60006000198214156107d2576107d26107d9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220e787aefdc8998e711988401a8d847606296769f65378b926db5b2c243312a4df64736f6c63430008070033";

export class SMAOracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _spotOracle: string,
    _spotDecimals: BigNumberish,
    _observer: string,
    _periods: BigNumberish,
    _updateInterval: BigNumberish,
    _deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SMAOracle> {
    return super.deploy(
      _spotOracle,
      _spotDecimals,
      _observer,
      _periods,
      _updateInterval,
      _deployer,
      overrides || {}
    ) as Promise<SMAOracle>;
  }
  getDeployTransaction(
    _spotOracle: string,
    _spotDecimals: BigNumberish,
    _observer: string,
    _periods: BigNumberish,
    _updateInterval: BigNumberish,
    _deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _spotOracle,
      _spotDecimals,
      _observer,
      _periods,
      _updateInterval,
      _deployer,
      overrides || {}
    );
  }
  attach(address: string): SMAOracle {
    return super.attach(address) as SMAOracle;
  }
  connect(signer: Signer): SMAOracle__factory {
    return super.connect(signer) as SMAOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SMAOracleInterface {
    return new utils.Interface(_abi) as SMAOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SMAOracle {
    return new Contract(address, _abi, signerOrProvider) as SMAOracle;
  }
}
