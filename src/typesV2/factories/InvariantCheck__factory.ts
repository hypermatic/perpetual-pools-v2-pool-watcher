/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  InvariantCheck,
  InvariantCheckInterface,
} from "../InvariantCheck";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "InvariantsFail",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "InvariantsHold",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolToCheck",
        type: "address",
      },
    ],
    name: "checkInvariants",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFactory",
    outputs: [
      {
        internalType: "contract IPoolFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161080b38038061080b83398101604081905261002f9161009e565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601e60248201527f466163746f727920616464726573732063616e6e6f74206265206e756c6c0000604482015260640160405180910390fd5b60601b6001600160601b0319166080526100ce565b6000602082840312156100b057600080fd5b81516001600160a01b03811681146100c757600080fd5b9392505050565b60805160601c61071a6100f1600039600081816040015260b4015261071a6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634219dc401461003b5780639e079fc41461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009161008c3660046105f4565b610093565b005b604051635ab78ee160e01b81526001600160a01b03808316600483015282917f000000000000000000000000000000000000000000000000000000000000000090911690635ab78ee19060240160206040518083038186803b1580156100f857600080fd5b505afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610635565b6101725760405162461bcd60e51b815260206004820152600f60248201526e141bdbdb081a5cc81a5b9d985b1a59608a1b604482015260640160405180910390fd5b6000816001600160a01b031663cd39f30f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e59190610618565b90506000826001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b15801561022257600080fd5b505afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190610618565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a082319060240160206040518083038186803b15801561029d57600080fd5b505afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d5919061068d565b9050600080836001600160a01b0316636a9dfc646040518163ffffffff1660e01b81526004016101c06040518083038186803b15801561031457600080fd5b505afa158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c9190610657565b915091506000816040015182600001518460400151856000015161037091906106a6565b61037a91906106a6565b61038491906106a6565b90506000866001600160a01b0316637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f9919061068d565b90506000876001600160a01b031663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e919061068d565b905061047c86848484610495565b61048a5761048a89886104b8565b505050505050505050565b6000816104a284866106a6565b6104ac91906106a6565b90941015949350505050565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b50505050806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561054657600080fd5b505af115801561055a573d6000803e3d6000fd5b505050505050565b600060e0828403121561057457600080fd5b60405160e0810181811067ffffffffffffffff821117156105a557634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201525092915050565b60006020828403121561060657600080fd5b8135610611816106cc565b9392505050565b60006020828403121561062a57600080fd5b8151610611816106cc565b60006020828403121561064757600080fd5b8151801515811461061157600080fd5b6000806101c0838503121561066b57600080fd5b6106758484610562565b91506106848460e08501610562565b90509250929050565b60006020828403121561069f57600080fd5b5051919050565b600082198211156106c757634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146106e157600080fd5b5056fea2646970667358221220a0ee9c2354b81abe5b32baa97b0eba00425f631770ad5922c29bbfafa61f5ceb64736f6c63430008070033";

export class InvariantCheck__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<InvariantCheck> {
    return super.deploy(_factory, overrides || {}) as Promise<InvariantCheck>;
  }
  getDeployTransaction(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, overrides || {});
  }
  attach(address: string): InvariantCheck {
    return super.attach(address) as InvariantCheck;
  }
  connect(signer: Signer): InvariantCheck__factory {
    return super.connect(signer) as InvariantCheck__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InvariantCheckInterface {
    return new utils.Interface(_abi) as InvariantCheckInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InvariantCheck {
    return new Contract(address, _abi, signerOrProvider) as InvariantCheck;
  }
}
